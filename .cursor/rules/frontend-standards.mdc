---
description: 
globs: 
alwaysApply: false
---
# Lofiever - Frontend Standards

## Tech Stack
- **Framework**: Next.js 14.1.0 with App Router
- **UI Library**: React 18.2.0
- **CSS**: Tailwind CSS 3.4.x
- **Real-time Communication**: Socket.io-client 4.7.x
- **Build Tool**: Turbopack (experimental)
- **Language**: TypeScript 5.x
- **State Management**: Zustand + React Query
- **Testing**: Jest + React Testing Library
- **E2E Testing**: Playwright

## Project Structure
```
src/
├── app/                    # Next.js App Router
│   ├── api/               # API endpoints
│   ├── (auth)/            # Auth-required routes
│   └── layout.tsx         # Root layout
├── components/            # React components
│   ├── player/           # Audio player components
│   ├── chat/             # Chat components
│   ├── playlist/         # Playlist components
│   └── shared/           # Shared components
├── lib/                   # Core libraries
├── stores/               # Zustand stores
├── styles/               # Global styles
└── utils/                # Utilities
```

## Component Architecture

### Component Organization
1. Group related components in feature directories
2. Use barrel exports (index.ts) for clean imports
3. Co-locate tests with components
4. Keep components focused and single-responsibility

Example structure:
```
components/player/
├── Player/
│   ├── Player.tsx
│   ├── Player.test.tsx
│   ├── PlayerControls.tsx
│   ├── PlayerProgress.tsx
│   └── index.ts
├── VolumeControl/
└── index.ts
```

### Component Template
```tsx
'use client';

import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { usePlayerStore } from '@/stores/player';
import { cn } from '@/utils/styles';

interface PlayerProps {
  initialTrack?: Track;
  onTrackChange?: (track: Track) => void;
}

export function Player({ initialTrack, onTrackChange }: PlayerProps) {
  // Implementation
  return (
    <div className={cn('player-container', className)}>
      {/* Content */}
    </div>
  );
}
```

## State Management

### Zustand Store Pattern
```typescript
import { create } from 'zustand';
import { devtools, persist } from 'zustand/middleware';

interface PlayerState {
  isPlaying: boolean;
  volume: number;
  actions: {
    play: () => void;
    pause: () => void;
    setVolume: (volume: number) => void;
  };
}

export const usePlayerStore = create<PlayerState>()(
  devtools(
    persist(
      (set) => ({
        isPlaying: false,
        volume: 1,
        actions: {
          play: () => set({ isPlaying: true }),
          pause: () => set({ isPlaying: false }),
          setVolume: (volume) => set({ volume }),
        },
      }),
      { name: 'player-store' }
    )
  )
);
```

### React Query Usage
```typescript
import { useQuery, useMutation } from '@tanstack/react-query';

export function useCurrentTrack() {
  return useQuery({
    queryKey: ['currentTrack'],
    queryFn: () => api.getCurrentTrack(),
    staleTime: 1000 * 60, // 1 minute
  });
}
```

## Styling

### Tailwind Configuration
```js
// tailwind.config.js
module.exports = {
  content: ['./src/**/*.{ts,tsx}'],
  theme: {
    extend: {
      colors: {
        brand: {
          50: '#f0f9ff',
          // ... other shades
          900: '#0c4a6e',
        },
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
      },
    },
  },
  plugins: [require('@tailwindcss/forms')],
};
```

### CSS Conventions
1. Use Tailwind classes directly for most styling
2. Create reusable class combinations with @apply for complex patterns
3. Follow mobile-first responsive design
4. Use CSS variables for dynamic values

## Performance Optimization

### Code Splitting
- Use dynamic imports for large components
- Lazy load below-the-fold content
- Implement route-based code splitting

```typescript
const Chat = dynamic(() => import('@/components/chat/Chat'), {
  loading: () => <ChatSkeleton />,
});
```

### Image Optimization
- Use Next.js Image component
- Implement responsive images
- Use appropriate formats (WebP)

```tsx
import Image from 'next/image';

export function AlbumArt({ src, alt }: ImageProps) {
  return (
    <Image
      src={src}
      alt={alt}
      width={300}
      height={300}
      className="rounded-lg"
      placeholder="blur"
      blurDataURL={generateBlurHash(src)}
    />
  );
}
```

### Performance Monitoring
- Implement Core Web Vitals tracking
- Use React Profiler for component optimization
- Monitor and optimize bundle size

## Testing

### Unit Tests
```typescript
import { render, screen, fireEvent } from '@testing-library/react';
import { Player } from './Player';

describe('Player', () => {
  it('should play/pause when controls are clicked', () => {
    render(<Player />);
    const playButton = screen.getByRole('button', { name: /play/i });
    
    fireEvent.click(playButton);
    expect(screen.getByLabelText(/playing/i)).toBeInTheDocument();
  });
});
```

### E2E Tests
```typescript
import { test, expect } from '@playwright/test';

test('user can control playback', async ({ page }) => {
  await page.goto('/');
  await page.click('[data-testid="play-button"]');
  await expect(page.locator('[data-testid="player-status"]')).toHaveText('Playing');
});
```

## Error Handling

### Error Boundaries
```tsx
import { ErrorBoundary } from '@/components/shared/ErrorBoundary';

export default function PlayerWithErrorBoundary() {
  return (
    <ErrorBoundary fallback={<PlayerError />}>
      <Player />
    </ErrorBoundary>
  );
}
```

### API Error Handling
```typescript
export async function fetchWithErrorHandling<T>(
  url: string,
  options?: RequestInit
): Promise<T> {
  try {
    const response = await fetch(url, options);
    if (!response.ok) {
      throw new ApiError(response.statusText, response.status);
    }
    return await response.json();
  } catch (error) {
    handleApiError(error);
    throw error;
  }
}
```

## Accessibility

### Guidelines
1. Use semantic HTML elements
2. Implement ARIA attributes when needed
3. Ensure keyboard navigation
4. Maintain color contrast ratios
5. Support screen readers

### Example Implementation
```tsx
export function PlayButton({ onClick, isPlaying }: PlayButtonProps) {
  return (
    <button
      onClick={onClick}
      aria-label={isPlaying ? 'Pause' : 'Play'}
      aria-pressed={isPlaying}
      className={cn(
        'focus:ring-2 focus:ring-offset-2 focus:ring-brand-500',
        'hover:bg-brand-100 dark:hover:bg-brand-800'
      )}
    >
      {isPlaying ? <PauseIcon /> : <PlayIcon />}
    </button>
  );
}
```

## Documentation

### Component Documentation
- Use JSDoc comments for component documentation
- Include usage examples
- Document props and return types
- Add accessibility notes when relevant

```tsx
/**
 * Player component that handles audio playback synchronization
 * @param {PlayerProps} props - The component props
 * @returns {JSX.Element} The rendered Player component
 * @example
 * ```tsx
 * <Player
 *   initialTrack={track}
 *   onTrackChange={handleTrackChange}
 * />
 * ```
 */
```
