---
description: 
globs: 
alwaysApply: false
---
# Lofiever - Project Overview

## About the Project

Lofiever is a 24/7 AI-powered lofi radio web application that streams continuous, synchronized music to all users. The platform leverages advanced AI (LLM) for dynamic playlist curation, real-time user interaction via chat, and seamless integration with music sources like Spotify and YouTube. All users hear the same track at the same moment, creating a shared listening experience.

## Core Features

- **Synchronized Playback**: 24/7 radio stream with real-time synchronization
- **AI-Driven Curation**: Dynamic playlist generation using LLM
- **Real-Time Chat**: User interaction and music suggestions
- **Music Integration**: Spotify and YouTube API integration
- **Analytics**: User engagement and playlist performance tracking

## Project Structure

```
src/
├── app/                    # Next.js App Router structure
│   ├── api/               # API endpoints (route handlers)
│   │   ├── stream/       # Streaming endpoints
│   │   ├── chat/         # Chat endpoints
│   │   ├── playlist/     # Playlist management
│   │   └── auth/         # Authentication routes
│   ├── (auth)/           # Auth-required routes
│   ├── layout.tsx        # Root layout
│   └── page.tsx          # Home page
├── components/            # React components
│   ├── player/           # Audio player components
│   ├── chat/             # Chat interface components
│   ├── playlist/         # Playlist components
│   └── shared/           # Shared UI components
├── lib/                   # Core libraries
│   ├── api/              # API client functions
│   ├── streaming/        # Streaming logic
│   ├── ai/               # AI/LLM integration
│   └── db/               # Database client
├── styles/               # Global styles
└── utils/                # Utility functions
```

## Key Components

- **[Player.tsx](mdc:src/components/player/Player.tsx)**: Synchronized audio player with real-time controls
- **[Chat.tsx](mdc:src/components/chat/Chat.tsx)**: Real-time chat interface with AI interaction
- **[Playlist.tsx](mdc:src/components/playlist/Playlist.tsx)**: Dynamic playlist display and management
- **[AIControls.tsx](mdc:src/components/ai/AIControls.tsx)**: AI-powered music curation interface

## API Structure

- **[/api/stream](mdc:src/app/api/stream/route.ts)**: Streaming and synchronization endpoints
- **[/api/chat](mdc:src/app/api/chat/route.ts)**: Real-time chat and AI interaction
- **[/api/playlist](mdc:src/app/api/playlist/route.ts)**: Playlist management and versioning
- **[/api/auth](mdc:src/app/api/auth/route.ts)**: Authentication and user management

## Development Guidelines

For detailed development standards, refer to:

- **[frontend-standards.mdc](mdc:.cursor/rules/frontend-standards.mdc)**: Frontend development standards
- **[componentes.mdc](mdc:.cursor/rules/componentes.mdc)**: Component patterns and best practices
- **[api-patterns.mdc](mdc:.cursor/rules/api-patterns.mdc)**: API design and communication patterns
- **[styling-guidelines.mdc](mdc:.cursor/rules/styling-guidelines.mdc)**: Styling and UI guidelines

## Tech Stack

### Frontend
- Next.js 14.1.0 (App Router)
- React 18.2.0
- TypeScript 5.x
- Tailwind CSS 3.4.x
- Socket.io-client 4.7.x

### Backend Services
- FFmpeg for audio processing
- Redis for caching and real-time features
- PostgreSQL with Prisma ORM
- OpenAI API for LLM integration
- AWS/GCP for deployment

## Implementation Roadmap

1. Core Infrastructure
   - Authentication system setup
   - Database schema and migrations
   - Basic streaming functionality

2. Music Integration
   - Spotify OAuth integration
   - YouTube API integration
   - Audio processing pipeline

3. AI/LLM Features
   - OpenAI API integration
   - Playlist curation system
   - Chat moderation

4. Real-time Features
   - WebSocket implementation
   - Chat system
   - Synchronization logic

5. Analytics & Monitoring
   - User analytics
   - Performance monitoring
   - Error tracking

## Contributing

Please follow our development standards and guidelines when contributing to the project. All code should be properly typed, tested, and documented.
